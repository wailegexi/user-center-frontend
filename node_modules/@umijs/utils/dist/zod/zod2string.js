var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/zod/zod2string.ts
var zod2string_exports = {};
__export(zod2string_exports, {
  zod2string: () => zod2string
});
module.exports = __toCommonJS(zod2string_exports);
var import_zod = require("../../compiled/zod");
function zod2string(schema) {
  if (schema instanceof import_zod.z.ZodObject) {
    const keys = Object.keys(schema.shape);
    const properties = keys.map((key) => `${key}: ${zod2string(schema.shape[key])}`).join(", ");
    return `z.object({${properties}})`;
  } else if (schema instanceof import_zod.z.ZodArray) {
    return `z.array(${zod2string(schema._def.type)})`;
  } else if (schema instanceof import_zod.z.ZodOptional) {
    return `z.optional(${zod2string(schema._def.innerType)})`;
  } else {
    const { typeName, checks } = schema._def;
    let str = `z.${typeName.replace("Zod", "").toLowerCase()}()`;
    if (checks && checks.length > 0) {
      checks.forEach((i) => {
        str += `.${i.kind}(${(i == null ? void 0 : i.value) || ""})`;
      });
    }
    return str;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  zod2string
});
