var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/core.ts
var core_exports = {};
__export(core_exports, {
  Core: () => Core
});
module.exports = __toCommonJS(core_exports);
var import_fs = require("fs");
var import_lodash = require("lodash");
var import_path = require("path");
var import_prettier = __toESM(require("prettier"));
var import_utils = require("./utils");
var import_utils2 = require("./utils");
var Core = class {
  constructor(options) {
    this.options = options;
    this.onAdd = (0, import_lodash.throttle)(() => {
      this.generate();
    }, 3e3);
    this.getCache = () => this.cache;
    this.generate = () => {
      const cache = this.cache;
      const content = [];
      Object.keys(cache).forEach((key) => {
        const { types } = cache[key];
        content.push(types);
      });
      (0, import_fs.writeFile)(
        this.options.outputFilePath,
        import_prettier.default.format(
          `
      export namespace ${this.options.namespace}{
        ${content.join("\n")}
      }
    `,
          { parser: "typescript" }
        ),
        (err) => {
          if (err) {
            console.log(err);
          }
        }
      );
      this.generateMock();
    };
    this.generateMock = () => {
      const cache = this.cache;
      if (this.options.mock) {
        const mockContent = import_prettier.default.format(
          "module.exports = {" + Object.keys(cache).map((key) => {
            const { res } = cache[key];
            return `'${key}': ${JSON.stringify(res)}`;
          }).join(",\n") + "}",
          { parser: "babel" }
        );
        (0, import_fs.writeFileSync)(this.options.mockCachePath, mockContent);
        (0, import_fs.writeFileSync)(this.options.mockOutputPath, mockContent);
      }
    };
    this.cache = JSON.parse(
      (0, import_fs.readFileSync)(this.options.cacheFilePath, "utf8") || `{}`
    );
    if (!(0, import_fs.existsSync)(this.options.mockCachePath)) {
      const mockCacheDir = (0, import_path.dirname)(this.options.mockCachePath);
      if (!(0, import_fs.existsSync)(mockCacheDir)) {
        (0, import_fs.mkdirSync)(mockCacheDir, { recursive: true });
      }
      (0, import_fs.writeFileSync)(this.options.mockCachePath, "");
    }
  }
  add(cacheKey, data) {
    let cacheWithoutTypes;
    if (this.cache[cacheKey]) {
      cacheWithoutTypes = (0, import_lodash.cloneDeep)(this.cache[cacheKey]);
      delete cacheWithoutTypes.types;
    }
    if (cacheWithoutTypes && JSON.stringify(cacheWithoutTypes) === JSON.stringify(data)) {
      return;
    }
    console.log(`[Request Record] 'add' - ${cacheKey}`);
    const { query, res, payload } = data;
    const [method, pathname] = cacheKey.split(" ");
    const getInterfaceName = (type) => {
      return (0, import_utils2.getType)(method, pathname, type);
    };
    const queryType = (0, import_utils2.JSON2TS)(query, {
      typeName: getInterfaceName("query"),
      comment: this.options.comment
    });
    const payloadType = (0, import_utils2.JSON2TS)(payload, {
      typeName: getInterfaceName("payload"),
      comment: this.options.comment
    });
    const resType = (0, import_utils2.JSON2TS)(res, {
      typeName: getInterfaceName("res"),
      comment: this.options.comment
    });
    const typeComment = `/** ${cacheKey} */`;
    const dataWithType = {
      ...data,
      types: typeComment + queryType + "\n" + payloadType + "\n" + resType
    };
    this.cache = {
      ...this.cache,
      [cacheKey]: dataWithType
    };
    this.save();
    this.onAdd();
  }
  save() {
    (0, import_fs.writeFileSync)(
      this.options.cacheFilePath,
      JSON.stringify(this.cache, void 0, 2)
    );
  }
};
Core.createCacheKey = (method, pathname) => {
  return `${method} ${pathname}`;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Core
});
