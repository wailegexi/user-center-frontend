var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);
var import_utils = require("@umijs/utils");
var import_fs = __toESM(require("fs"));
var import_path = require("path");
var import_record = require("./record");
var DEFAULT_PORT = "8000";
var DEFAULT_HOST = "0.0.0.0";
var src_default = (api) => {
  api.describe({
    key: "requestRecord",
    config: {
      schema(joi) {
        return joi.object({
          exclude: joi.array(),
          type: joi.boolean(),
          namespace: joi.string(),
          comment: joi.boolean(),
          outputDir: joi.string(),
          successFilter: joi.func(),
          role: joi.string(),
          mock: joi.object({
            outputDir: joi.string(),
            fileName: joi.string(),
            usingRole: joi.string()
          })
        });
      },
      default: {
        mock: {
          outputDir: "./mock",
          fileName: "requestRecord.mock.js",
          usingRole: "default"
        },
        outputDir: "./types"
      }
    },
    enableBy: ({ userConfig }) => !!userConfig.proxy || api.name === "setup"
  });
  api.registerCommand({
    name: "record",
    fn({ args }) {
      api.service.commands["dev"].fn({ args });
    }
  });
  api.onGenerateFiles(async () => {
    api.writeTmpFile({
      content: import_fs.default.readFileSync(
        (0, import_path.join)(__dirname, "../../src/runtime/mock.ts"),
        "utf-8"
      ),
      path: "../requestRecordMock.ts"
    });
    api.writeTmpFile({
      content: import_fs.default.readFileSync(
        (0, import_path.join)(__dirname, "../../src/runtime/startMock.js"),
        "utf-8"
      ),
      path: "../startMock.js"
    });
  });
  api.modifyAppData(async (memo) => {
    if (api.name !== "record")
      return memo;
    memo.port = await import_utils.portfinder.getPortPromise({
      port: parseInt(String(process.env.PORT || DEFAULT_PORT), 10)
    });
    memo.host = process.env.HOST || DEFAULT_HOST;
    memo.ip = import_utils.address.ip();
    return memo;
  });
  api.modifyConfig((config) => {
    if (api.name !== "record")
      return config;
    const { EventHandler } = new import_record.RequestRecord({
      ...api.userConfig.requestRecord,
      mock: {
        ...api.userConfig.requestRecord.mock
      },
      ready: api.name === "record",
      role: api.args.scene
    });
    const { proxy } = config;
    const newProxy = (Array.isArray(proxy) ? proxy : proxy.target ? [proxy] : Object.keys(proxy).map((key) => {
      return {
        ...proxy[key],
        context: key
      };
    })).map((args) => {
      var _a;
      if (!((_a = api.userConfig.requestRecord.exclude) == null ? void 0 : _a.includes(args.context))) {
        return {
          ...args,
          onProxyReq: (proxyReq, req) => {
            var _a2;
            EventHandler.onProxyReq(proxyReq, req);
            (_a2 = args.onProxyReq) == null ? void 0 : _a2.call(args, proxyReq, req);
          },
          onProxyRes: (proxyRes, req, res) => {
            var _a2;
            EventHandler.onProxyRes(proxyRes, req, res);
            (_a2 = args.onProxyRes) == null ? void 0 : _a2.call(args, proxyRes, req, res);
          }
        };
      }
      return args;
    });
    return {
      ...config,
      proxy: newProxy,
      mock: false
    };
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
