var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  JSON2TS: () => JSON2TS,
  getType: () => getType,
  object2Type: () => object2Type,
  resolePathWithRole: () => resolePathWithRole
});
module.exports = __toCommonJS(utils_exports);
var JSONStringifyWithoutQuotes = (object) => {
  return `
    {
      ${Object.keys(object).map(
    (key) => `${key}: ${typeof object[key] === "object" ? JSONStringifyWithoutQuotes(object[key]) : object[key]}`
  ).join(",\n")}
      }
  `.trim();
};
var JSON2TS = (json, options) => {
  const { typeName, comment } = options;
  const data = typeof json === "string" ? JSON.parse(json) : json;
  const fn = (object) => {
    const currentObject = {};
    for (const key in object) {
      const value = object[key];
      switch (typeof value) {
        case "object": {
          if (value === null) {
            currentObject[key] = "null";
            break;
          }
          if (Array.isArray(value)) {
            if (value.length === 0) {
              currentObject[key] = "never[]";
              break;
            }
            const value0 = value[0];
            if (value0 === null) {
              currentObject[key] = "null[]";
              break;
            }
            currentObject[key] = typeof value[0] === "object" ? `${JSONStringifyWithoutQuotes(fn(value[0]))}[]` : `${typeof value[0]}[]`;
          } else {
            currentObject[key] = fn(value);
          }
          break;
        }
        default: {
          currentObject[key] = typeof value;
        }
      }
    }
    return currentObject;
  };
  const typeObject = fn(data);
  const typeString = `
export type ${typeName} = {
  ${Object.keys(typeObject).map(
    (key) => `${comment ? `/** example: ${typeof json[key] === "object" ? JSON.stringify(json[key]).replace(/(:)/g, "$1 ").replace(/(,)/g, "$1 ") : json[key]} */` : ""}
        ${key}: ${typeof typeObject[key] === "object" ? JSONStringifyWithoutQuotes(typeObject[key]) : typeObject[key]}`
  ).join(";\n  ")}
}
  `;
  return typeString;
};
var object2Type = (object, options) => {
  return JSON2TS(object, {
    typeName: options.typeName
  });
};
var getType = (method, pathname, type) => {
  return `${method}_${pathname.replace(/([A-Z])/g, "_$1")}_${type}`.replace(/\//g, "_").replace("__", "_").replace(/\./g, "_").toUpperCase();
};
var resolePathWithRole = (originPath, role) => {
  if (!role) {
    return originPath.replace("[role].", "");
  }
  return originPath.replace(`[role]`, role);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  JSON2TS,
  getType,
  object2Type,
  resolePathWithRole
});
