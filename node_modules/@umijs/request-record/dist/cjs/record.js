var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/record.ts
var record_exports = {};
__export(record_exports, {
  RequestRecord: () => RequestRecord
});
module.exports = __toCommonJS(record_exports);
var import_url = require("url");
var import_zlib = require("zlib");
var import_config = require("./config");
var import_core = require("./core");
var import_utils = require("./utils");
var PAYLOAD_NAME = "__payload";
var parseBody = (incomingMessage, options) => new Promise((resolve, reject) => {
  let chunks = [];
  incomingMessage.on("data", (chunk) => {
    chunks.push(chunk);
  });
  incomingMessage.on("close", () => {
    const body = Buffer.concat(chunks);
    if (options == null ? void 0 : options.contentEncoding) {
      (0, import_zlib.unzip)(body, (err, result) => {
        if (err) {
          reject(err);
        } else {
          try {
            resolve(JSON.parse(result.toString("utf-8")));
          } catch (error) {
            resolve({});
          }
        }
      });
      return;
    }
    try {
      resolve(JSON.parse(body.toString("utf-8")));
    } catch (error) {
      resolve({});
    }
  });
});
var RequestRecord = class {
  constructor(config) {
    this.EventHandler = {
      onProxyReq: (proxyReq, req) => {
        if (this.config.getConfig().ready) {
          if (req.headers["content-length"]) {
          }
          if (proxyReq.path.includes("?")) {
            proxyReq.path = proxyReq.path + "&__rid__=" + Math.random();
          } else {
            proxyReq.path = proxyReq.path + "?__rid__=" + Math.random();
          }
          proxyReq.setHeader("if-none-match", "");
          parseBody(req).then((body) => {
            req[PAYLOAD_NAME] = body;
          });
        }
      },
      onProxyRes: (proxyRes, req, res) => {
        if (this.config.getConfig().ready && res.statusCode !== 304) {
          parseBody(proxyRes, {
            contentEncoding: proxyRes.headers["content-encoding"]
          }).then((responseData) => {
            const method = req.method;
            const pathname = (0, import_url.parse)(req.url).pathname;
            const successFunction = () => {
              this.core.add(import_core.Core.createCacheKey(method, pathname), {
                res: responseData,
                query: req.query,
                payload: req[PAYLOAD_NAME]
              });
            };
            if (this.successFilter) {
              if (this.successFilter(responseData)) {
                successFunction();
              }
            } else {
              successFunction();
            }
          });
        }
      }
    };
    this.config = new import_config.Config(config);
    const initialConfig = this.config.getConfig();
    this.core = new import_core.Core({
      cacheFilePath: this.config.getCacheFilePath(),
      outputFilePath: this.config.getTypeFilePath(),
      comment: initialConfig.comment,
      namespace: initialConfig.namespace,
      mock: !!initialConfig.mock,
      mockCachePath: this.config.getMockCacheFilePath(),
      mockOutputPath: this.config.getMockOutputFilePath(),
      role: this.config.getRole()
    });
    this.successFilter = this.config.getSuccessFilter();
    if (initialConfig.ready) {
      console.log(`[Request Record] ready with scene=${this.config.getRole()}`);
      this.core.generateMock();
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RequestRecord
});
