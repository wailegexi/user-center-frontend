var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/runtime/mock.ts
var mock_exports = {};
__export(mock_exports, {
  startMock: () => startMock
});
module.exports = __toCommonJS(mock_exports);
var import_child_process = require("child_process");
var import_lodash = require("lodash");
var import_path = require("path");
var startMock = (args) => {
  const { port, scene } = (0, import_lodash.merge)(
    {
      port: 7e3,
      scene: "default"
    },
    args
  );
  return new Promise((resolve, reject) => {
    const proc = (0, import_child_process.fork)((0, import_path.join)(__dirname, "./startMock.js"), [], {
      env: {
        scene,
        port: String(port)
      }
    });
    proc.on("exit", (code) => {
      if (code !== 0) {
        reject(new Error(`Mock server exited with code ${code}`));
      }
    });
    resolve({
      close: () => {
        proc.kill();
      }
    });
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  startMock
});
