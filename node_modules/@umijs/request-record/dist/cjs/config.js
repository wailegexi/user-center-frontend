var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/config.ts
var config_exports = {};
__export(config_exports, {
  Config: () => Config
});
module.exports = __toCommonJS(config_exports);
var import_fs = require("fs");
var import_path = require("path");
var import_utils = require("./utils");
var Config = class {
  constructor(userConfig) {
    this.createInitialFile = () => {
      const { outputDir, mock } = this.config;
      const { outputDir: mockOutputDir = "./mock" } = mock;
      const finalOutputDir = (0, import_path.join)(process.cwd(), outputDir);
      if (!(0, import_fs.existsSync)(finalOutputDir)) {
        (0, import_fs.mkdirSync)(finalOutputDir, { recursive: true });
      }
      const finalMockOutputDir = (0, import_path.join)(process.cwd(), mockOutputDir);
      if (!(0, import_fs.existsSync)(finalMockOutputDir)) {
        (0, import_fs.mkdirSync)(finalMockOutputDir, { recursive: true });
      }
      const cacheDir = this.getCacheDir();
      const cacheFilePath = this.getCacheFilePath();
      if (!(0, import_fs.existsSync)(cacheDir)) {
        (0, import_fs.mkdirSync)(cacheDir, { recursive: true });
      }
      if (!(0, import_fs.existsSync)(cacheFilePath)) {
        (0, import_fs.writeFileSync)(cacheFilePath, "{}");
      }
    };
    this.getConfig = () => this.config;
    this.getMockCacheFilePath = () => {
      return (0, import_path.join)(
        this.getCacheDir(),
        "mock",
        (0, import_utils.resolePathWithRole)("./[role].mock.cache.js", this.config.role)
      );
    };
    this.getMockOutputFilePath = () => {
      if (this.config.mock) {
        const { fileName = "requestRecord.mock.js", outputDir = "./mock" } = this.config.mock;
        const role = this.config.role;
        return (0, import_path.join)(process.cwd(), outputDir, (0, import_utils.resolePathWithRole)(fileName, role));
      }
    };
    this.getTypeFilePath = () => {
      const { outputDir } = this.config;
      return (0, import_path.join)(process.cwd(), outputDir, `./index.d.ts`);
    };
    this.getCacheFilePath = () => {
      return (0, import_path.join)(
        this.getCacheDir(),
        (0, import_utils.resolePathWithRole)("./[role].cache.json", this.config.role)
      );
    };
    this.getCacheDir = () => {
      const { outputDir = "./types" } = this.config;
      return (0, import_path.join)(process.cwd(), outputDir, "cache");
    };
    this.getRole = () => {
      return this.config.role;
    };
    this.getSuccessFilter = () => {
      return this.config.successFilter;
    };
    this.config = {
      mock: {
        fileName: "api.mock.js",
        outputDir: "./mock"
      },
      namespace: "RECORD_API",
      comment: true,
      outputDir: "./types",
      ready: true,
      type: false,
      ...userConfig
    };
    this.createInitialFile();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Config
});
