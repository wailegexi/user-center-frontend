"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const openapi_1 = require("@umijs/openapi");
const fs_1 = require("fs");
const path_1 = require("path");
const rimraf_1 = __importDefault(require("rimraf"));
const serve_static_1 = __importDefault(require("serve-static"));
const plugin_utils_1 = require("umi/plugin-utils");
exports.default = (api) => {
    api.onStart(() => {
        console.log('Using openapi Plugin');
    });
    api.describe({
        key: 'openAPI',
        config: {
            schema(joi) {
                const itemSchema = joi.object({
                    requestLibPath: joi.string(),
                    schemaPath: joi.string(),
                    mock: joi.boolean(),
                    projectName: joi.string(),
                    apiPrefix: joi.alternatives(joi.string(), joi.function()),
                    namespace: joi.string(),
                    hook: joi.object({
                        customFunctionName: joi.function(),
                        customClassName: joi.function(),
                    }),
                });
                return joi.alternatives(joi.array().items(itemSchema), itemSchema);
            },
        },
        enableBy: api.EnableBy.config,
    });
    const { absNodeModulesPath, absTmpPath } = api.paths;
    const openAPIFilesPath = (0, path_1.join)(absNodeModulesPath, 'umi_open_api');
    try {
        if ((0, fs_1.existsSync)(openAPIFilesPath)) {
            rimraf_1.default.sync(openAPIFilesPath);
        }
        (0, fs_1.mkdirSync)((0, path_1.join)(openAPIFilesPath));
    }
    catch (error) {
        // console.log(error);
    }
    // 增加中间件
    api.addBeforeMiddlewares(() => {
        return [(0, serve_static_1.default)(openAPIFilesPath)];
    });
    api.onGenerateFiles(() => {
        var _a;
        if (api.env !== 'development')
            return;
        const openAPIConfig = api.config.openAPI;
        const arrayConfig = plugin_utils_1.lodash.flatten([openAPIConfig]);
        const config = ((_a = arrayConfig === null || arrayConfig === void 0 ? void 0 : arrayConfig[0]) === null || _a === void 0 ? void 0 : _a.projectName) || 'openapi';
        api.writeTmpFile({
            path: (0, path_1.join)('plugin-openapi', 'openapi.tsx'),
            noPluginDir: true,
            content: `
      // This file is generated by Umi automatically
      // DO NOT CHANGE IT MANUALLY!
      import { useEffect, useState } from 'react';
      import { SwaggerUIBundle } from 'swagger-ui-dist';
      import 'swagger-ui-dist/swagger-ui.css';
      const App = () => {
        const [value, setValue] = useState("${config || 'openapi'}" );
        useEffect(() => {
          SwaggerUIBundle({
            url: \`/umi-plugins_$\{value}.json\`,
            dom_id: '#swagger-ui',
          });
        }, [value]);

        return (
          <div
            style={{
              padding: 24,
            }}
          >
            <select
              style={{
                position: "fixed",
                right: "16px",
                top: "8px",
              }}
              onChange={(e) => setValue(e.target.value)}
            >
              ${arrayConfig
                .map((item) => {
                return `<option value="${item.projectName || 'openapi'}">${item.projectName || 'openapi'}</option>`;
            })
                .join('\n')}
            </select>
            <div id="swagger-ui" />
          </div>
        );
      };
      export default App;
`,
        });
    });
    if (api.env === 'development') {
        api.modifyRoutes((routes) => {
            routes['umi/plugin/openapi'] = {
                path: '/umi/plugin/openapi',
                absPath: '/umi/plugin/openapi',
                id: 'umi/plugin/openapi',
                file: (0, plugin_utils_1.winPath)((0, path_1.join)(absTmpPath, 'plugin-openapi', 'openapi.tsx')),
            };
            return routes;
        });
    }
    const genOpenAPIFiles = (openAPIConfig) => __awaiter(void 0, void 0, void 0, function* () {
        if (api.env !== 'development')
            return;
        const openAPIJson = yield (0, openapi_1.getSchema)(openAPIConfig.schemaPath);
        (0, fs_1.writeFileSync)((0, path_1.join)(openAPIFilesPath, `umi-plugins_${openAPIConfig.projectName || 'openapi'}.json`), JSON.stringify(openAPIJson, null, 2));
    });
    api.onDevCompileDone(() => __awaiter(void 0, void 0, void 0, function* () {
        if (api.env !== 'development')
            return;
        try {
            const openAPIConfig = api.config.openAPI;
            if (Array.isArray(openAPIConfig)) {
                openAPIConfig.map((item) => genOpenAPIFiles(item));
                return;
            }
            genOpenAPIFiles(openAPIConfig);
        }
        catch (error) {
            console.error(error);
        }
    }));
    const genAllFiles = (openAPIConfig) => __awaiter(void 0, void 0, void 0, function* () {
        const pageConfig = require((0, path_1.join)(api.cwd, 'package.json'));
        const mockFolder = openAPIConfig.mock ? (0, path_1.join)(api.cwd, 'mock') : undefined;
        const serversFolder = (0, path_1.join)(api.cwd, 'src', 'services');
        // 如果mock 文件不存在，创建一下
        if (mockFolder && !(0, fs_1.existsSync)(mockFolder)) {
            (0, fs_1.mkdirSync)(mockFolder);
        }
        // 如果mock 文件不存在，创建一下
        if (serversFolder && !(0, fs_1.existsSync)(serversFolder)) {
            (0, fs_1.mkdirSync)(serversFolder);
        }
        yield (0, openapi_1.generateService)(Object.assign(Object.assign({ projectName: pageConfig.name.split('/').pop() }, openAPIConfig), { serversPath: serversFolder, mockFolder }));
        api.logger.info('[openAPI]: execution complete');
    });
    api.registerCommand({
        name: 'openapi',
        fn: () => __awaiter(void 0, void 0, void 0, function* () {
            const openAPIConfig = api.config.openAPI;
            if (Array.isArray(openAPIConfig)) {
                openAPIConfig.map((item) => genAllFiles(item));
                return;
            }
            // TODO: 用户没有 src/services 会报错
            genAllFiles(openAPIConfig);
        }),
    });
};
